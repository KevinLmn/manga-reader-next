version: "3.8"

services:
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile.dev
    container_name: manga-backend-dev
    ports:
      - "3012:3012"
    env_file:
      - backend/.env
    volumes:
      - .:/app
      - /app/node_modules # ðŸ›¡ Prevent host node_modules from overriding container's
      - /app/backend/node_modules
    environment:
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
    depends_on:
      - redis
      - postgres
    command: sh -c "pnpm --filter backend exec prisma generate && pnpm --filter backend dev"
  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile.dev
    container_name: manga-frontend-dev
    env_file:
      - frontend/.env
    ports:
      - "3011:3011"
    volumes:
      - .:/app
      - /app/node_modules
      - /app/frontend/node_modules
    depends_on:
      - backend
    command: pnpm --filter frontend dev
    environment:
      - CHOKIDAR_USEPOLLING=true
      - CHOKIDAR_INTERVAL=100
      - WATCHPACK_POLLING=true
      - WATCHPACK_POLLING_INTERVAL=100

  redis:
    image: redis:7-alpine
    container_name: manga-redis-dev
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass $REDIS_PASSWORD
    environment:
      REDIS_PASSWORD: $REDIS_PASSWORD
    restart: unless-stopped

  postgres:
    image: postgres:16-alpine
    container_name: manga-postgres-dev
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped

volumes:
  redis_data:
  postgres_data:
